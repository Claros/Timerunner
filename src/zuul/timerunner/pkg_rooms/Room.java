package zuul.timerunner.pkg_rooms;import java.util.HashMap;import zuul.timerunner.pkg_items.ItemList;import zuul.timerunner.pkg_others.Character;import zuul.timerunner.pkg_others.GameEngine;/** * Class Room - a room in an adventure game. * * A "Room" represents one location in the scenery of the game.  It is  * connected to other rooms via aExits.  For each existing exit, the room  * stores a reference to the neighboring room. *  * @author  Michael Kolling and David J. Barnes * @author  ASTIER Naji & ROBIN Yohann * @version 18/03/2013 */public class Room {    /** The description. */    private String aDescription;        /** The exits list. */    private HashMap<String,Room> aExits;         /** The image name. */    private String aImageName;        /** The objects list. */    private ItemList aObjects;        /** The a character. */    private HashMap<String,Character> aCharacter;        /**     * Create a room described "aDescription" with a given image.     * Initially, it has no aExits. "aDescription" is something like     * "in a kitchen" or "in an open court yard".     *      * @param aDescription the description     * @param image the image     */        public Room(final String aDescription, final String image)     {        this.aDescription = aDescription;        this.aExits = new HashMap<String,Room>();        this.aImageName = "pics/" + image;        this.aObjects =  new ItemList();        this.aCharacter = new HashMap<String,Character>();    }        /**     * Define an exit from this room.     *      * @param pDirection the direction     * @param pNeighbor the neighbor     */    public void setExit(final String pDirection, final Room pNeighbor)     {        this.aExits.put(pDirection, pNeighbor);    }        /**     * Return the description of the room (the one that was defined in the     * constructor).     *      * @return the short description     */    public String getShortDescription()    {        return this.aDescription;    }        /**     * Return a long description of this room, in the form:     *     You are in the kitchen.     *     Exits: north west     *      * @return the long description     */    public String getLongDescription()    {        GameEngine.getGUI().enableButton(this.aExits);        return "You are " + this.aDescription + ".\n" + this.getExitString() + this.getItemsString() + this.getCharacterDialog();    }        /**     * Return a string describing the room's aExits, for example     * "Exits: north west".     *      * @return the exit string     */    private String getExitString()    {        StringBuilder vReturnString = new StringBuilder( "Exits :" );        for ( String vS : aExits.keySet())        {            vReturnString.append( " " + vS );        }        return vReturnString.toString();    }        /**     * @return The Items String     */    public String getItemsString()    {        if (this.aObjects.getSize() > 0)        {            return "\nItems : " + this.aObjects.getItemsString();        }         else        {            return "";        }    }        /**     * Adds the character.     *     * @param pCharacter the character     */    public void addCharacter(final Character pCharacter)    {        this.aCharacter.put(pCharacter.getName(), pCharacter);    }        /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     *     * @param pDirection the direction     * @return the exit     */    public Room getExit(final String pDirection)     {        return aExits.get(pDirection);    }        /**     * Return a string describing the room's image name.     *     * @return the image name     */    public String getImageName()    {        return this.aImageName;    }        /**     * Gets the item list.     *     * @return the item list     */    public ItemList getItemList()    {        return this.aObjects;    }        /**     * Gets the characters.     *     * @return the characters     */    public HashMap<String, Character> getCharacters()    {        return this.aCharacter;    }        /**     * Gets the character.     *     * @param pName the name     * @return the character     */    public Character getCharacter (final String pName)    {        return aCharacter.get(pName);    }        /**     * Removes the character.     *     * @param pName the name     */    public void removeCharacter(final String pName)    {        aCharacter.remove(pName);    }        /**     * Gets the character dialog.     *     * @return the character dialog     */    public String getCharacterDialog ()    {        StringBuilder vReturnString = new StringBuilder( "");        for ( String vS : aCharacter.keySet())        {            vReturnString.append( "\n" + vS  + " : " + aCharacter.get(vS).getDialog());        }        return vReturnString.toString();    }    }